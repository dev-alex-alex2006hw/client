/**
 * Provides a utility for working with pages of search results.
 * @module page
 * @private
 */

var url = require('url');

/**
 * A page of results.  Pages do not need to be constructed directly, but are
 * generated by methods that make API requests.
 * @param {Object} data Data with optional prev and next links.
 * @param {function(Object):Promise} factory Function that creates a promise of
 *     new data given a query object.
 * @constructor
 */
function Page(data, factory) {
  var links = data.links;

  /**
   * Get the previous page.  If there is no previous page, `previous` will be
   *     `null`.
   * @return {Promise.<Page>} The previous page.
   * @method
   */
  this.prev = !links.prev ? null : function() {
    return factory(url.parse(links.prev, true).query);
  };

  /**
   * Get the next page.
   * @return {Promise.<Page>} The next page.  If there is no next page,
   *     `next` will be `null`.
   * @method
   */
  this.next = !links.next ? null : function() {
    return factory(url.parse(links.next, true).query);
  };

  this.data = data;
}

module.exports = Page;
